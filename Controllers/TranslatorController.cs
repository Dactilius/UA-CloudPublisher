
namespace Opc.Ua.Cloud.Publisher.Controllers
{
    using Azure;
    using Azure.AI.OpenAI;
    using Microsoft.AspNetCore.Http;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.Extensions.Logging;
    using Opc.Ua.Cloud.Publisher.Interfaces;
    using System;
    using System.IO;
    using System.Text;

    public class TranslatorController : Controller
    {
        private readonly IUAClient _client;
        private readonly ILogger _logger;

        public TranslatorController(IUAClient client, ILoggerFactory loggerFactory)
        {
            _client = client;
            _logger = loggerFactory.CreateLogger("TranslatorController");
        }

        public IActionResult Index()
        {
            return View("Index", string.Empty);
        }

        [HttpPost]
        public IActionResult Generate(string chatprompt)
        {
            try
            {
                if (string.IsNullOrEmpty(chatprompt))
                {
                    throw new ArgumentException("The chat prompt is invalid!");
                }

                string endpoint = Environment.GetEnvironmentVariable("AZURE_OPENAI_API_ENDPOINT");
                string key = Environment.GetEnvironmentVariable("AZURE_OPENAI_API_KEY");
                string name = Environment.GetEnvironmentVariable("AZURE_OPENAI_API_DEPLOYMENT_NAME");
                OpenAIClient client = new OpenAIClient(new Uri(endpoint), new AzureKeyCredential(key));

                string chatResponseSample = System.IO.File.ReadAllText(Path.Combine(Directory.GetCurrentDirectory(), "pac4200.jsonld"));

                Response<ChatCompletions> responseWithoutStream = client.GetChatCompletions(
                    name,
	                new ChatCompletionsOptions()
	                {
		                Messages =
                        {
                            new ChatMessage(ChatRole.System, "You are a Web of Things Thing Description generator."),
                            new ChatMessage(ChatRole.User, @"Generate a Web of Things Thing Description for a Siemens Sentron PAC4200"),
                            new ChatMessage(ChatRole.Assistant, chatResponseSample),
                            new ChatMessage(ChatRole.User, "Generate a Web of Things Thing Description for a " + chatprompt)
                        },
		                Temperature = (float)0.2,
		                MaxTokens = 23420,
		                NucleusSamplingFactor = (float)0.95,
		                FrequencyPenalty = 0,
		                PresencePenalty = 0,
	                });

                ChatCompletions completions = responseWithoutStream.Value;
                string autogeneratedConfig = completions.Choices[0].Message.Content;

                return File(Encoding.UTF8.GetBytes(autogeneratedConfig), "APPLICATION/octet-stream", "asset_description_wot_td.jsonld");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return View("Index", ex.Message);
            }
        }

        [HttpPost]
        public IActionResult Load(IFormFile file, string endpointUrl)
        {
            try
            {
                if (string.IsNullOrEmpty(endpointUrl))
                {
                    throw new ArgumentException("The endpoint URL specified is invalid!");
                }

                if (file == null)
                {
                    throw new ArgumentException("No file specified!");
                }

                if (file.Length == 0)
                {
                    throw new ArgumentException("Invalid file specified!");
                }

                string payload = string.Empty;
                using (Stream content = file.OpenReadStream())
                {
                    byte[] bytes = new byte[file.Length];
                    content.Read(bytes, 0, (int)file.Length);
                    payload = Encoding.UTF8.GetString(bytes);
                }

                if (string.IsNullOrEmpty(payload))
                {
                    throw new ArgumentException("Invalid file specified!");
                }

                _client.ExecuteCommand("ConfigureAsset", "AssetManagement", "http://opcfoundation.org/UA/EdgeTranslator/", payload, endpointUrl);

                return View("Index", "UA Edge Translator configured successfully!");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return View("Index", ex.Message);
            }
        }
    }
}

@using UA.MQTT.Publisher.Models

@model OpcSessionModel

@{
    ViewData["Title"] = "Browse & Select Telemetry for Publishing to the Cloud";
}

<h1>@ViewData["Title"]</h1>

<div class="container-fluid browser_browse_container">
   <div class="row browser_top_container">
        <div class="col">
            <div id="OpcNodeTree" class="browser_browse_nodetree_container">
                <ul>
                    <li id="rootnode">
                        @Model.EndpointUrl
                        <ul>
                            <li></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col">
            <div class="mt-4 invisible" id="variableReadContainer">
                <div class="alert alert-dark" role="alert" id="variableReadHeader"></div>
                <ul class="list-group">
                    <li class="list-group-item" id="variableReadValue"></li>
                    <li class="list-group-item" id="variableReadStatus"></li>
                    <li class="list-group-item" id="variableReadSourceTimeStamp"></li>
                    <li class="list-group-item" id="variableReadSourceServerStamp"></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="row browser_browse_status_message_container mt-2">
        <p class="alert alert-light">Status: <div class="alert alert-light" id="message">Browsed OPC Server</div></p>
    </div>
    <div class="row browser_browse_disconnect_button mt-2">
        @using (Html.BeginForm("Disconnect", "Browser"))
        {
            <input id="disconnectButton" class="btn btn-primary btn_browser" type="submit" value="Close" />
        }
    </div>
</div>

@section scripts {
    <script src="~/lib/jstree/jstree.min.js"></script>
    <script src="/signalr/hubs"></script>
    <script>
        var title = "TitleBrowser";

        $(async function () {
            //connection to SignalR hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/statusHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Create a function that the hub can call back to display messages
            connection.on("addNewMessageToPage", (session, message) => {
                $('#message').text(message);
            });

            // Start/continue the connection
            async function establishSignalRConnection() {
                try {
                    await connection.start();
                    console.log("connection to signalr hub successfull established");
                } catch (err) {
                    console.warn("Error creating SignalR connection, retry in 5 seconds %o", err);
                    setTimeout(async () => { await establishSignalRConnection(); }, 5000);
                }
            };

            connection.onclose(async () => { await establishSignalRConnection(); });

            // Start the connection.
            await establishSignalRConnection();
        });

        $(function () {
            var status = $.connection.statusHub;

            // Create a function that the hub can call back to display messages
            status.client.addNewMessageToPage = function (session, message) {
                if (session === '@Model.SessionId') {
                    $('#message').replaceWith('<p id="message">CommunicationStatusMessageLabel' + ' ' + htmlEncode(message) + '</p>');
                }
            }

            // Start/continue the connection
            $.connection.hub.start().done(function () { });

            // initialize all context panels to default state closed
            $("#attributeReadContextPanel").addClass("overlay-close").removeClass("overlay-right-open");
            $("#variableReadContextPanel").addClass("overlay-close").removeClass("overlay-right-open");
            $("#variablePublishContextPanel").addClass("overlay-close").removeClass("overlay-right-open");
            $("#browserErrorContextPanel").addClass("overlay-close").removeClass("overlay-right-open");
        });

        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        function htmlDecode(value) {
            decodedValue = $('<div>').html(value).text();
            return decodedValue;
        }

        function getRightLeftDiv(leftContent, rightContent) {
            return "<div class=\"bg-light d-flex justify-content-between\">"
                + "<div>" + leftContent + "</div>"
                + "<div>" + rightContent + "</div>"
                + "</div>";
        }

        function VariableRead(obj, onSuccess) {
            $("#variableWriteContainer").addClass('invisible');

            $.post({
                url: "/Browser/VariableRead",
                data: { __RequestVerificationToken: $('[name=__RequestVerificationToken]').val(), jstreeNode: obj.item.nodeId },
                success: function (data) {
                    $("#variableReadContainer").removeClass("invisible");

                    console.log("callback node name: " + obj.item.nodeName);
                    $("#variableReadHeader").html(obj.item.nodeName);

                    console.log("callback got results: " + data);
                    var dataContainer = JSON.parse(data);

                    $("#variableReadValue").html(getRightLeftDiv("<strong>Value:</strong>", dataContainer.value));
                    $("#variableReadStatus").html(getRightLeftDiv("<strong>Status:</strong>", dataContainer.status));
                    $("#variableReadSourceTimeStamp").html(getRightLeftDiv("<strong>Source Timestamp:</strong>", dataContainer.sourceTimestamp));
                    $("#variableReadSourceServerStamp").html(getRightLeftDiv("<strong>Server Timestamp:</strong>", dataContainer.serverTimestamp));

                    if (typeof onSuccess !== "undefined" && onSuccess !== null) {
                        onSuccess();
                    }
                },
                error: function (response) {
                    console.log("Got error reading opc variable: %o", response);
                }
            });
        }

        function VariablePublish(obj) {
            $.post({
                url: "/Browser/VariablePublishUnpublish",
                data: { __RequestVerificationToken: $('[name=__RequestVerificationToken]').val(), jstreeNode: obj.item.nodeId, method: "publish" },
                success: function (data) {
                    $("#variablePublish_variableData").html(data);
                    $("#variablePublish_variableName").html(obj.item.nodeName);
                    $("#connectLoader").hide();
                    $("#waitingForPublishing").hide();
                    $("#publishBody").show();
                    if (data == htmlDecode('OpcMethodCallSucceeded')) {
                        var jsonNode = $('#OpcNodeTree').jstree(true).get_node(obj.item.nodeId);
                        $('#OpcNodeTree').jstree(true).set_type(jsonNode, "published");
                        jsonNode.original.publishedNode = true;
                        $("#rdxLink").show();
                    }
                },
                error: function (response) {
                    openErrorPanel();
                    if (response.status == 403) {
                        $('#browserErrorMessage').html('ErrorInsufficientPermissions');
                    } else {
                        $('#browserErrorMessage').html('ErrorUnknown');
                    }
                }
            });
        }

        function openErrorPanel() {
            $("#browserErrorContextPanel").removeClass("overlay-close").addClass("overlay-right-open");
            $("#disconnectButton").attr("disabled", "disabled");
            $(".dashboard-cancel-icon").show();
        }

        function closeErrorPanel() {
            $('#browserErrorContextPanel').addClass('overlay-close').removeClass("overlay-right-open");
            $("#disconnectButton").attr("enabled", "enabled");
            if ($('#browserErrorMessage').html() == 'ErrorUnknown') {
                window.location.href = "/Browser/Disconnect?backUrl=" + back;
            }
        }

        function OpcServerMenu(node) {
            var result = {};

            if (node.original.nodeClass === "Variable" && node.original.publishedNode != true && (node.original.accessLevel & 0x01)) {
                $.extend(result, {
                    "Publish": {
                        "separator_before": false,
                        "separator_after": false,
                        "label": "Publish",
                        "nodeId": node.id,
                        "nodeName": node.text,
                        "action": function (obj) {
                            $("#variablePublishContextPanel").removeClass("overlay-close").addClass("overlay-right-open");
                            $("#publishHeader").html('ContextPanelHeaderPublish');
                            $("#publishBody").hide();
                            $("#waitingForPublishing").html('ContextPanelPublishing');
                            $("#rdxLink").hide();
                            $("#waitingForPublishing").show();
                            $("#connectLoader").show();
                            $(".dashboard-cancel-icon").show();
                            VariablePublish(obj);
                        }
                    }
                });
            }

            if (node.original.nodeClass === "Variable" && (node.original.accessLevel & 0x01)) {
                $.extend(result, {
                    "Read": {
                        "separator_before": false,
                        "separator_after": false,
                        "label": "Read",
                        "nodeId": node.id,
                        "nodeName": node.text,
                        "action": function (obj) {
                            VariableRead(obj);
                        }
                    }
                });
            }

            return result;
        }

        var back;
        $(function ($) {
            back = document.referrer;
            $("#hiddenBackUrl").val(back);

            $("#disconnectButton").attr("enabled", "enabled");
            $('#OpcNodeTree').on(
                "init.jstree", function () {
                });
        });

        $(function ($) {
            $('#OpcNodeTree').jstree({
                "plugins": ["wholerow", "contextmenu", "types"],

                "core": {
                    "themes": {
                        "name": "default",
                        "dots": true,
                        "icons": true,
                        "stripes": true,
                        "responsive": true
                    },
                    "data": {
                        "type": "POST",
                        "cache": false,
                        "async": false,
                        "url": function (node) {
                            return node.id === "#" ? "/Browser/GetRootNode" : "/Browser/GetChildren";
                        },
                        "data": function (node) {
                            return { __RequestVerificationToken: $('[name=__RequestVerificationToken]').val(), jstreeNode: node.id };
                        },
                        "error": function (xdr) {
                            openErrorPanel();
                            if (xdr.status == 403) {
                                $('#browserErrorMessage').html('ErrorInsufficientPermissions');
                            } else {
                                $('#browserErrorMessage').html('ErrorUnknown');
                            }
                        }
                    }
                },

                "types": {
                    "default": {
                        "icon": "glyphicon"
                    },
                    "published": {
                        "icons": true,
                        "icon": "glyphicon glyphicon-ok"
                    }
                },

                "contextmenu": {
                    "show_at_node": false,
                    "items": OpcServerMenu
                }
            });
        });

        $(function ($) {
            $('#OpcNodeTree').on('ready.jstree', function (e, data) {
                var nodes = $('#OpcNodeTree').jstree('get_json');
                $(this).jstree("open_node", nodes);
            });

            $('#OpcNodeTree').on('open_node.jstree', function (e, data) {
                for (var node in data.instance._model.data) {
                    if (node != "#") {
                        var nodeOriginal = $(this).jstree(true).get_node(node).original;
                        if (nodeOriginal.publishedNode == true) {
                            var jsonNode = $(this).jstree(true).get_node(node)
                            $(this).jstree(true).set_type(jsonNode, "published")
                        }
                        else {
                            var jsonNode = $(this).jstree(true).get_node(node)
                            $(this).jstree(true).set_type(jsonNode, "default")
                        }
                    }
                }
            });
            jQuery('.scrollbar-macosx').scrollbar();
        });
    </script>
}